(def inputT "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2")
(def inputD "1 + 2 * 3 + 4 * 5 + 6")
(def inputA "2 * 3 + (4 * 5)")
(def input "6 * ((4 * 8 + 4) + (3 * 5 + 3 + 3 * 7 * 5)) + 7 + (9 * (6 + 9 * 7 + 2 * 6 * 6)) + 2
    6 + 6 * (8 + 9 * 6 * 7 + 4 * 8) * (3 * 2 + 8 * (5 * 8 + 6 * 3 * 7 + 4))
    ((2 + 5 * 5 + 8 + 3 + 4) + 8 * 7 * 6) * 9 * 8 + 2
    (2 + 7 * (3 + 5 * 2 + 3 + 6) * (4 * 6 + 8 * 3 * 2 + 7)) + 3 * ((2 + 8 + 6) * 8 + 9 * 6 * 6) + 5 + 6 + 5
    ((5 * 8 * 4 + 6 * 9) + 2 * 7 + 2 + (6 * 7 + 6)) + 6 + 6 * 9 * (2 * 8 * (3 + 7) * 9) * 7
    6 * 4 + 8 + (2 * (4 * 3 * 7 * 4) * 3)
    6 + 8 + ((3 + 7 + 4 + 9 + 6) * 7 + 9 + 2 * 4 * 6) * (3 + 6 * 5 * 2 * 4) * 3 + 9
    (5 * 5 * 5 * 7 + 9) * 7 * 5
    9 + 5 + (2 + (2 * 3 + 5 * 9) * 6) * 2 * (2 * (4 + 5 + 2 + 9 + 3))
    8 + 7 + (2 + 4 + 5 + 9) * (7 + 4) * 7
    9 * (3 + 9 + 5 + 7) * 5 + 6
    2 + 3 + 4
    8 * 4
    6 * 4 * (2 * 7 * 7 * 2) * 4
    2 * (6 + 5) + 5
    (5 + 6 * 2 * 3) * (3 + 8 + 4 + 2 + 6) * 8
    ((7 + 7 * 3 + 3 + 7) * 3 + 7 + 2 * (3 * 8 * 2 + 2 * 7 * 4) + 9) + 4 + 3 * 7
    6 + 8 + ((4 + 9 + 5 + 9 + 5 + 6) * 6 * (3 * 5 + 2 * 8) * 9 * 5 + 9)
    (4 * 2) + 7 + 9 + 8 + ((2 * 9 * 4 + 3 + 7 + 8) + 7 * 9)
    2 * 3 + 3 * 8
    9 * 6 * 3 * 8 * ((8 * 4 * 2 * 6) + 3 * 8)
    7 * 8 + 5 * 8 * 9
    7 * ((3 * 3 + 4 + 4) * 3) + 8 + 7 + 2 * 8
    2 * (9 + 9 * (8 * 9))
    (8 + 6 + 9 * (5 + 5 + 5) * 6 * 9) * ((2 + 7 * 6 + 2) + 4 * 9 * 8 * (5 * 2 + 5 + 2 + 5))
    (6 * 9) + 5 * 8 * 8 + 8 * (7 + 4 + 6 * (9 * 9) + 8)
    2 * 9 + 3 * ((3 * 7 * 4 * 3 + 3 * 8) * (8 + 6 + 3 * 8 + 6) + 5 + 3 + 7 + 5) + 9 * (3 + 3 + 6 + 4)
    ((9 + 2 * 7 * 8 + 7) + 3 * (6 + 9 * 3)) + 7
    4 * (8 * (6 + 3 * 4))
    4 + 3 + 7 + 4 + 2 * 7
    7 * 8 * 5 + 7
    (7 * 9) * (2 * 9 + 5 + (5 + 2)) + ((9 + 7 + 9 * 7 * 4 + 8) * (6 * 7 + 4) + 3 * 7 + 4 * 8)
    (8 * 6 * 9 * 7 + 2 * 2) * 8 * 2 * 9 + (8 + 9 * 7 * 8 * 7) + (5 * 5)
    9 * 4 + 8 + (8 * 6 * 4 + (5 * 6 * 3 * 6 + 3) + 5) * 9 + 4
    7 * (7 * 8 * 9) * 2
    (3 + 3 + (8 + 5 * 6) + 7 + (9 + 8 + 2 * 3 * 9 + 2)) + (3 + 4 + (9 * 5 * 2 + 2 + 8) + (4 * 3 + 4)) + 8 * 6 * ((9 + 8) + 9 * 3)
    3 + 2 + 7
    (6 + 6 + 6 * 3 + (5 + 5 * 4)) * (3 * (9 + 2 + 4 * 5 * 3 * 3)) + (3 + 6 + 6 + 5 + 6 * 8)
    (9 + (9 * 7 + 7 * 4 + 2) + (8 * 8) + 5 + 9 * 2) * 5 * (5 * 9 * 5 + 8 * 6)
    2 + 5 + (2 + 2 + (7 * 2 * 7)) * (2 * (6 * 5 + 9 * 4)) * 4
    5 + 7
    7 + 5 * 4 * ((8 + 6 + 9 * 7 * 7 + 6) + 3 + 3 + 5) * (8 + (4 * 2 * 9) * 5 * 6 + (2 * 8 + 2 * 7)) + 8
    6 * 7 * (2 * 3) * 3 * 3
    6 * 3 + 8 * (4 * 7 + 9) + 4 * 7
    4 + 2 + ((3 + 7) + (4 + 9))
    4 + 8 * 6 * 5 * 7 + (7 * (8 + 5 + 5 + 2 + 3 * 5) * (6 + 3) + (2 * 3 * 5 + 4))
    4 + (7 * 7 * (5 * 4 + 8) * 2) + 8 * 3
    (4 * 9 * 8 * 9 * (6 * 7 + 2 * 5 + 6)) * ((4 + 2 * 5 + 9 * 9) * 3 + 8 * 2) + 9 + 9 + 2
    4 * 5 + 9 * (4 * (8 + 8 * 5))
    7 + (7 * 5 * (5 * 6) + 2 * 2) + (6 * 3 * (7 * 9 + 2 * 6)) + 5 * 7 + ((7 * 4 * 4 + 8 * 8 * 6) * (8 * 8 * 7 + 9 * 3 + 2) * 2 * 5)
    (8 + 3 * 6 * 6 * 2 + 4) + 4
    9 * 8 * (9 + 8)
    ((9 * 4 + 5 + 5) + 2 + 8 * 6) * 6 * 5 * 9
    (7 * 3) + 3 * 8 * 3 * 7 + 8
    8 + (9 * 7 * (6 + 2)) * 9
    ((6 + 9 * 2 + 7 + 4) * 5) * 7 + (6 + 3 * 9 + 5 + 9 * 4) + (3 * 6 * 3 + 8) + ((4 * 3 + 2 + 2) + 9 * 5 + 5 * 5)
    (8 * (8 * 6 + 2) * 4) * 4 * 6
    2 + 9 + (3 * 9 * 4 + (7 * 7)) + 7
    (2 * 3 + 2) + ((8 + 4 + 6 * 7 * 8 * 3) * 8 + (3 + 2 + 3 * 8 * 6 + 3) + 8)
    2 * (9 * 7 * (4 + 5 + 8)) + (3 + (7 + 2 * 6 + 2) + 7 * 2 * 9 * 7) + 2 * 4 * 3
    5 + ((9 * 6 * 6) + (6 * 6 + 5) * 2) * 9 + 7 * ((8 * 8 * 2 + 2) + (4 * 9)) + (7 + 2 * 4 + 7 + 6)
    ((7 * 9 + 8 * 6 * 4 + 8) + (9 + 9 + 6 * 4) + 6) * 3 * 8
    2 * 5 + 6 + 7 * (6 * (7 * 5 + 2 * 2) + 7 * 8)
    4 * (4 * 4 * 2 + 3 * 9 + 7) * 7 + 6
    7 + 3 * 4 + 2 * 8
    6 + 3 * 8
    5 + ((6 + 2 * 3 + 4) + 8 + 4 + 5 * 6 * 6)
    (2 + (6 + 3 + 4 + 9) * (7 + 3 + 2 + 7 * 9) + (2 * 2 * 7 + 9 * 7) + 4 + 4) + ((5 + 5) + 4 + 5 + 2 * 2) + 2 + 4 * 6
    (5 * (4 + 4 * 5 * 7 + 9 + 6) * 9) * 6 + 2
    (6 + 2 + (8 * 9 + 2) + 8 + 5 + (7 + 2)) * 6
    (9 * 3 * (8 * 7 + 6 + 7 * 3)) + 3
    (4 + 4 + 2 * 9 + (5 * 9 * 3 + 7) + 9) * 2 + 6
    4 * ((9 * 3 + 9) + 4) * 9
    (5 + 3 + 4) * ((5 + 4 + 3 * 6) * 7 * 2 * 6 * 8) + 3 * 9 + 7 + 5
    (3 + 4 * 8 + 8 + 3) * 4 * 7 * ((7 + 8 * 3 + 7 * 7 * 8) + 2 + 4 + (7 + 6 * 4) + 2 * 6)
    4 * (8 + 2 * 8) * 6 * 7 * 9 + 5
    5 + 3 + 6 + 8 * (2 + (4 * 5 * 2 + 9 * 9))
    (3 + 6 + 5) * 2 * 9 + 3
    (7 * 5 * 2 * 2 + 5) * 6
    7 * 8 * (3 * 5 + (4 * 7) + 6) + 6 + (5 * (7 * 3) * 3 * 5) * 6
    (8 + (6 + 2 * 2 * 6) + 3 + 9 + 5) * 3 + 6 * 7 + 4
    (5 * 8 + (8 + 6 * 7 * 7 * 3)) + (6 + 7 + (5 + 7 + 7 + 4 * 8) + 8 * 5 + 2) * (5 + (5 * 4 * 9 + 7 * 9 * 6))
    9 * (9 * 2) * 2 * 5
    2 + 3 * 8 * 6 + 7 * 2
    4 + 2 * 6 * 5 * 6 + (4 + 7 * 6 * (2 * 7 + 5 + 6 * 7 + 6))
    ((4 * 6 + 5 + 5) * 5 * 4 + 8 * 8) * 3 + 5
    8 * 5 * 5 * (3 * 8 + 3 + 5 + 9 * (5 + 4 * 5 + 3 * 2))
    8 + 4 * 7 * 3 * 4
    (9 + 4 * (5 * 7) + 6 * 8 * (8 + 7 + 9)) + (2 * (4 + 8 * 3)) * 7
    ((6 * 6 + 3 + 9 + 6) + 3) + ((9 + 2) + 6 + (2 + 7)) * 5 * ((3 + 2) + 9 * 2)
    (6 * 7) + 8
    (5 * 3 + 8 + (9 * 4 * 4 * 3 * 9 + 2) * 6) * 8 + 4
    8 * 7 + (6 * 8 + (8 + 2 + 8 * 3 * 9))
    8 * (3 + (8 * 6)) + (2 + 5 + 8 * 3 + 8 * 9)
    ((9 * 3 + 9) + 8 + 7 * 9) + 5 * (4 + (6 * 7 * 8) * 4 + (5 + 6 + 6 * 2) * 3 * 5) + 8 + 5
    4 + (2 + 3 + 5 + (8 * 2 + 7) + 3) * 8 * 3 * 3 * 2
    5 + 2 * 6 + (5 + (2 * 5 * 7 + 6) * 5 * 4 + 4) + (2 + 5 * 9 * (2 * 5 * 2 + 5 * 2)) * 6
    9 + 5 + 5 + ((7 * 4) * 6) + 3
    (2 * 4 + 6 + (6 * 5 * 6 + 5 * 3 * 5) + 4 * 4) * (3 + 5 + 8 + 3 + (5 * 8 * 4 + 4 * 6 + 5) * 8) * 4 + (3 + 6 + 9 + (4 + 6 * 7 * 2 + 5) + (3 + 2 + 8 * 9 * 9))
    (2 + 9 * 7) + (2 * 4 * (7 + 3 * 2))
    (8 * 4 + 3 * 3) * 9 * 8
    (4 * 3) * 6 * 5 * 7 + (4 + 7 + 4 * 6 * 9 * 6)
    (7 + 4 + 9 + 7) * 3 * (2 * (7 * 5 * 7) * 5 + 9 * 4 + 3)
    2 * 4 * 9 * 7 + (3 * 6 * 5 * 7 + 4)
    5 + 5 * 2 * 3
    5 + 6 * (8 * 9 + (4 + 7 * 6 + 5 * 8 + 8) + 9 * (2 + 7 + 6 + 5)) + (4 * 4 + 7 * 3) + 6
    5 * 8 + 6 + (9 + 3 + (5 + 3 + 2 + 9))
    4 * (7 * 2 * 6 * 2 + 6 * (5 + 3)) * (2 + 5 * 5 * 3) + (7 * 7 + (7 + 6) * 5 * 6) * (4 + (3 + 4) + 4 * 5 * (5 + 4 * 9 * 7 * 9 * 6))
    (5 * 8 + 3 * 3 + (3 + 8)) * 9 + 3 + 4 + 4
    2 + 5 * 2 * 5 * 8 + 6
    4 * 7 * 5 + ((2 + 3 + 9 * 4) + 4 * (4 * 2 * 4 + 9 * 7)) * 6
    (4 * 5 * 3 * 5) * 3 + 8 * 4
    7 + 4 + (6 * (4 * 4 + 7)) + 5 + 9 * 3
    (3 * 8 * 7 * (2 + 6) + (8 * 9 + 8 + 3 * 2) + 6) * 2 + 3 * 8
    (6 + 9 * 4 * 4 * 9 + (4 + 7 + 7 * 7)) + (4 * 3 * (6 * 7 + 4 + 5 + 8) * 7) * ((5 * 7 * 5 * 9) + 4 + 4 + 8) + 3
    8 * 5 * (5 * 8) * 5 + 8 + 9
    3 + 7 + (5 + 4) + ((9 * 8 * 4 + 7 + 7) + 6) * (8 + 8 + (4 * 4 + 8 + 4 + 8) * 8 + 2 + (4 * 7 * 4))
    9 * 3 * 5 + (3 + 3 + (4 + 8 + 6 + 4 + 9 * 2) + 7 * 7)
    ((9 * 7 + 8 * 6) + 3 + 2 + 8 + (6 * 6 + 7 * 4) * 6) * 4 + ((8 + 6 * 4 * 7 + 3 + 6) * 6 + 3 * 6 * (5 + 8 + 8 * 6 + 2 + 3)) + 9 + 9 + 6
    7 + 3 + 8 + (9 * 2 + (3 * 3 + 6 + 4)) + (6 + 7 * 3 * 2 * 9 + (4 + 5 + 6 + 9 + 2 + 4))
    (7 + 5 + 6) * 2 * 7 * (3 * 5)
    (6 * 5 * 9 * 4) * 9 * 2 + 3 * 7 * 5
    8 * (2 + (4 + 8 * 5 * 7) * 3)
    (6 + 2 + 8 * 3 * 8) + ((9 + 8 + 8 + 9 * 3) * (3 * 4) * 2 * 4 + 6 + 5) * 5 * 6 * 4 + 7
    (2 * 6) + (7 + 8 + 3)
    5 + 4 * 7 * 3 * (3 + 3 + (2 + 3 * 8 + 4) + 9 + 3 * 3) + 3
    9 * ((8 * 5 * 8 + 7 + 2) * (6 + 2 * 9) + 2) * 7
    (6 * 8 * 8 * (4 + 5 + 3 + 4)) * 9 + (2 + 4 + 2 + 8)
    (8 + (2 + 3 * 7) * 5 * 6 * 3) * 5 * 7 + (7 + (7 * 8 * 4 * 5) * 5 * 3 * 4 * 8) + ((2 + 6 * 9 * 2 + 8) + 7 * (5 * 8 * 5 + 6 + 9)) * 2
    4 * 6 + 3 + (5 + 5) + 2
    5 + (7 + 2) + 7 * 7 + (2 + 5) * 3
    (9 + 4 * 7 + (7 * 2 + 8 * 8 * 8)) + 2 * (7 * 9 + 7 + 6) + 5 + 5
    9 * 9 + (8 + (8 + 7 + 8 + 2 + 8 + 5) + 6 * 2 * 5 * 6) + 3
    6 + (9 + 5 * 3 + 6 + 8) + 3
    2 * 4 * 2 + 9 + 3 * ((8 * 6 * 9 + 7 * 6) * 3 * 2 + 9 + 9)
    6 * 3 + (4 + 8 + (3 + 5 + 5) * 6 * 2 * 3) + 6 * 5 + 9
    (7 * 8 + 9) * 7 * (6 + 5) * (4 + 8 * 5 * 6 * 9) * 4
    5 * (7 * 3 + 3 * 4 * (2 * 3 * 9))
    6 + 6 * 3 + 7 * (4 + 4 * 5) * (6 + 2)
    7 + 8 * 9 * 3 * 8 * 2
    3 * 2
    8 * ((3 * 4 * 3) * 9 + 9 + 9) * 2 * 4 + 6 * 4
    3 + (4 + 5 + 5) + 4 + 6
    (4 * 7 * 5 + 8 * 7) * 4 * (6 * 6 + 4) * 4 + (2 + 7 + 2 + 8 * 6)
    (2 + 2 + 8 + 9 * 9) + (9 * 4 * 2 * 9) * 9
    (8 * (2 * 7 + 9) * 4) * 4 * 5 + 2 * 8
    ((7 + 8 + 6) + (9 + 8 * 7) + 6 * (5 * 8)) * 4
    4 + (3 + (5 + 2 * 3 * 3 * 3) * 2) * (7 + 2)
    5 + (5 + 3 * 4 * 6 + 6)
    (4 + 4) + 7 + 8 + 6 * 5
    5 * (6 + (6 + 6 * 2 + 9) + 8 * (2 * 6)) * 6 * 9
    (4 + 7 * 6 * 9) + 6 * (9 * 7) * 4 * ((6 + 7) + 5 + 9 * 5 * 5 + 2)
    (4 + (6 + 8 + 4 * 9) * 8 + (5 + 3 + 7)) + 2 * 3 * 9 * 3
    9 * 9 + 9 + (4 * 9 * 3 + 4) * 9 * 6
    2 * (6 + (8 + 7 + 6) * 9 * 6 * (2 * 8 * 3)) * ((9 * 7 + 6 * 3) * 8 * 5 + 8 + (7 + 7 + 7 * 5) * 5) + 2
    6 + (7 + 8 * (5 + 4 * 3 * 2 + 2)) + (4 + 8 + 5 + 7 + 7 * (7 * 6 + 2 * 8 * 6 + 4)) * (6 * 9) * 9 * 9
    7 * (5 * 7 * 5 * (7 + 7 + 9 + 5 * 2) * 3 * 3) * (4 * 9)
    7 + 2 * 9
    (9 + (6 + 3)) * 3 + 9 + 3 * 9 * (8 * (4 + 3 * 9))
    7 + 2 * 4 * 5 * (6 * 5 + 3 * 3 * (5 * 8 + 7 * 5) * 7)
    6 * (6 * 6 + 5 * 2) + 8 * ((4 + 2 * 7 + 9 + 9) * 4 + 5 * 5 * 2) * 3
    3 * ((7 * 2) * 2 + 5 + 3 * 2 + 5)
    9 * (4 + 3 * 6 * 4 * 6 + 3) + 7
    2 * 8 + (2 + 9) * 8 + (9 + (5 * 8) + 2) * 6
    (4 + (2 * 7 * 8 * 5 * 9) + 6 + (8 + 2 * 9 + 6) * 5 + 8) + 7 + 7 + 7
    8 + (3 + 7 + 5 * 8) + 2 * (4 * 3)
    9 + (2 * 5 * 2) * (2 + 4 + (4 + 4 * 7 * 9) * 6 + (8 + 9 * 3)) + ((2 * 7 * 8 + 5 * 5 + 5) * 6 * 9 + 5 * 9) + 2
    7 + (4 + (2 * 4 + 6 + 3 + 8 + 5) + 2 * 5 + 3)
    (7 + 4 + 9 * 7 + 2 + (5 * 8 * 8 + 2)) + 2 + 7
    8 * (8 + 4)
    5 * (3 + 8 * 4)
    8 + (5 * 4 + 3 + 5)
    3 * 5 * 9 * 5 + 8 + 8
    2 * 4 * ((3 * 3 * 7 * 2 + 7) + 9) * 4 + 3
    9 + 8 + (4 + (6 * 4 * 3 * 8) * (8 + 6 * 3) + 7)
    3 * (3 + 6 * 7 + 8 + 4 + (5 * 4 + 3 + 4 * 6)) * 4 + 3 + (5 * 3 + (8 * 8 + 6 * 3 + 6 * 9) + 2 + 9)
    (5 + 5 * 7) + 3 * 2 + (8 * 4 + 3 + 4)
    (7 * 8 * (2 + 6 + 8) + 6) * 5
    7 * 8 + ((6 * 9) * 5 * 5 * 9 + 9) + (7 + 8 + 2)
    8 * 4 * 4 * (7 + (5 * 4 * 4) + 3 * (4 + 8 * 7) * 2 * 9) * (4 + 5) * 6
    (2 * 3 + (3 * 4 + 7 + 5 + 2 + 2) + 7) + 7
    (6 * (8 + 6 * 3 + 7 * 4 + 7) + 2 + (5 + 2 + 2 + 5 + 4 * 7) * 6 + (2 + 4 * 7)) * 3 + 7
    3 * (2 * 8 * 7 + 6) * 8 + 7 * ((7 + 2 + 3 + 2) * 8 + (3 * 2 + 7 * 7 + 8 + 3) * 8 + 3 + 9) * 2
    (9 * 2 + 4) + 4 * (7 * 2 * 5 * 3 * 6)
    (3 + 9 + 2 * 5) * (6 * 6) * 9 * (4 + 7) * 9 * 7
    (5 + 8 * 6 * 5) + 6 + (3 + 9 * 8 * 2) * 7
    6 + ((9 + 7 + 2 * 7 + 2 + 7) * (5 + 5 * 8 + 9 + 3 + 4) + (9 * 7 + 7 * 7 + 9) + 4 * 6 + 6) + 6 + 2 * 3
    (4 + (4 + 4 + 7 + 5 + 8)) + (7 + (2 * 8 + 4 + 6)) + 8 + 8 + 2
    7 * (4 * 8 * 5 * (4 * 3 * 4 + 2 + 7) + 6 * 6)
    9 * 4 + 4 + ((9 + 3) * 5 + 5) + 6
    (4 * 9 + 3 + (9 * 6 + 4 * 6 + 3) * 8) + 3 + 9 * 4 + 8 * 6
    (3 + 3) + 8 * 4 * 6
    8 + 7 * (4 + 4 * (6 + 3 + 3 + 4 + 7 + 4) * (2 + 8 + 9 * 4 * 7) * 4 * (7 + 2 * 6 + 8 * 2 + 5))
    6 * (2 + (4 * 9 * 8) + 8 + (8 + 6 + 3 * 8 * 5 * 7) + 9) + 8 * 9
    (8 + 5) + (4 * 5 * 2 * 2 + 4 + 6) + (8 + 7 * 2)
    9 * (7 + 3) * 7 * (6 * 9 + 4) * 4
    2 * 4 + (9 + 8 + 3 + 5 + 9 + (4 + 7 * 6 * 7 + 9)) * 9 * 3
    9 * (7 * 3) + 4 * 7 + 2
    7 + 9
    2 * (7 + 7 + 4 + 9 * 5) * 8 + 3
    3 + 9 * 7 * (7 * 8 * 5 * 3)
    ((4 + 6 + 6 * 9 * 9) + 2 + 8 + (5 + 8 + 2)) + 5 * 5 + 7
    (9 + 9) * (6 + (5 + 7 + 3 * 4) * 7) + (4 * 7 + 2 + 9 + 9) * 9 + (8 * 4 * 2)
    5 * (7 * 5) * 3 + 3 * 5 + 7
    9 * ((9 * 4 + 2 + 6 * 2 * 5) * (8 + 7) * 7 * 7 * 8 + 9) + 7 * 9 + (8 * 8 + 4 * 4 * 4)
    9 * 9 + (4 + 9) + 7 + (5 * (7 + 7 + 9 + 4 * 4) * (5 + 9 * 7 + 5 * 9 * 2) + 7 + 2)
    7 + 8 + 4 + ((3 + 4) * 2 + 3 * 5 + 9 + 6) * 6 * (9 * 6 + 9 * 8 * 5 * 8)
    4 + (4 + 7 * (5 * 6 * 3 * 9 + 8) * 4) + 6 + 6 * ((8 + 7 * 7 + 5 + 2) + 3 + (8 + 3 + 3 + 2 * 9 + 7) * (8 + 5 + 7 * 9 + 2) + 6 + 5)
    8 * 8 * 9 + (3 * 4 * 4 * 7 * (8 * 2 * 3 + 3)) * 2
    ((4 * 5 * 4) + 3) + 6 * 6 * 4 * 5
    3 * 3 + 5 + (7 + 3) * 9 * 6
    ((7 * 3 * 7 + 3 * 7) + 4) + 2 + 4 + 7 + 8
    6 + (8 * 9 * 6 * 3 * (5 * 9 + 7 * 5)) * (6 * 6 + 7 * 7) + 2 + 4 * 3
    (2 * (8 * 2 * 3 * 3) * 3) * (2 + 5 * 9) + ((9 * 6 + 6 + 8 + 3 + 6) + 3 * 5 + (3 * 8 + 8 * 2 + 9) + 3 + 6)
    4 + 5
    (7 * (6 * 9 + 5 * 6 + 3) * 3 * (3 * 7 * 2 * 3 + 7 * 9)) * 9
    (8 + 2 + 9 * 6 * (9 + 5 + 4 + 2) * 5) * 9
    (6 + 6) + (7 + 9 + 8) + (7 + 3 * (6 + 2 + 8 * 5 * 7) + 7 * 3 + 7) * 3 + 3 * 6
    6 * 8 + ((6 + 4 * 3) + (3 * 2 + 4) + 9 * 7) * 4
    (7 * (2 * 4 * 5 + 9)) + 9 + (8 * 2 + (2 * 4 + 9 * 2 * 5) + 3 + 6 + 8) * 9 * 8
    8 * 7 * 8 * (4 + 4)
    (4 + 8 + (8 + 7 * 3 + 4 * 2 * 7) * 5 * (9 * 9 * 7 + 3 + 9 + 5)) * 9 + 4 * 3 * (8 + 7 + (9 * 2)) * 3
    6 * 5 * 8 + (2 + 3 * 7 * 4 * 2)
    2 * (7 * 7) * (6 + 7 + 2 * 3 * 7) * 2 * 5 * 7
    7 * 2 * (3 * (2 * 5 * 7 + 3 * 8)) + (9 * (6 * 6 * 7 * 3) + (4 + 3 + 2 + 9 * 8) + 5 * (7 * 2 * 3 * 8 + 5 * 7)) * 8
    ((2 * 7 + 5) + 3 * 2 * 7) + 4 * 8
    4 * (4 + 6) + (4 * 2 * 8 + (3 * 8 + 4 * 8))
    3 + 3 * 8 * 6 + (4 + (5 + 5 + 6 + 5 * 5) * 3 * 8 * 4) * 5
    9 + 9 * (5 + 7 + 7) * 5
    (5 * (7 + 6 * 9 + 6 * 9 + 5) + 3 + (4 * 8 + 5 * 8 * 3) * (9 * 9 + 2 * 2 + 2 * 8)) + 7
    ((6 * 8 + 5) * (6 + 6 * 4 * 7 + 5 * 5) * 7) * 5 * 8 + 2 * 6 * 8
    (3 + 7 + 2 + 2 * 2 + 6) + 4 * 2 * 3
    5 * 2 * (7 * 2 + 2 + 8 * 2) + 4 * 4
    2 * 6 * 9 + (9 + 2 + 6)
    7 * (4 + 7 + 4 * 4) + 8
    6 * 8 + 9 * 7 + (2 * (6 + 8 * 5 * 9 * 3 * 6) + 7)
    4 * 9 * (4 + 9 + 8 + 7) + 7 + 4 + 7
    ((8 * 8) * 6 + 6 * (7 + 8) + 3 + 9) + (2 * 9 + 2 * 3 * 7) + (7 + 2 + 5) * 5
    9 + 9 + 5 * (8 * 7 * 4 + 8 + 8 * 4) + 4
    (2 + (4 + 3 + 7) * 8 + 2) * (7 * 8 * 4 + 5)
    7 * (7 * 5 * 8 * (5 + 8 + 6 + 9) * 6 * 6) * 3
    (6 + 7 * (6 + 9) + 3 * (2 + 9 + 5) * 5) * 3 * (3 * (4 * 6 + 4 * 5 * 5))
    8 + 7 + 4 + (5 + 7 + 9 + 8) + 4 * (4 + 2 + 7)
    4 + 2 * 6 + (9 * (3 + 5) * (2 + 7 * 6 + 8 + 8) + 6 * 8 * 7) + 7
    (2 * (9 * 2 + 8 * 3 + 2) + (7 * 3 * 5 * 6)) * 2 + 9 + 7 + (4 + 7 * 8 + 9 * 3) + 8
    6 * (9 * 8 + (5 + 2 * 5 + 2 * 6 + 6) * 8 + 2)
    8 * 2 + (7 * 7 * (9 * 6 + 3)) + 7 + 5 * 4
    9 + 3 + 7 + 9 + (5 + (7 * 4 * 6 + 3 + 7 + 3) * 8 + (9 + 4 * 8 * 7 * 7) + 2)
    ((4 * 4 * 8) + 6 * 4 * 7 + 4 * 7) + 7 * 8 + 3 + 8 + 9
    6 * (5 + 2 * (4 + 3 * 5 + 6 * 2 + 6) * 5 * 4 + 4) + 4 + (9 * (7 * 5 * 2 * 4 + 5) + 8) * (5 * (2 + 2) + 7 + (6 * 4 + 3 * 7 * 9))
    2 * (7 + 9) * (2 * 2 + 4 * 7 * 6) * 5 + 5 * ((5 * 8 + 3 + 9 * 3) + 6 * 4 + 9)
    (4 * 3 + 5 * 7 + 3 + 3) + (3 * 8 * 3 * 4 * 4) * 8 + 5 * 8
    6 * 4 * (4 * (3 + 6) + 2)
    9 * (7 + 8 + 5 + (9 * 9 * 8 * 6 * 5) * 9)
    (6 * 7) * 5 + 5 + 7 + 3 + ((4 + 7 * 5 + 6 + 7) * 3 + 4 * 4 + 3 + (6 + 2 * 3 * 2 + 4 + 8))
    3 + 4 * 2 + 2 * 7
    (7 * 4 + 9) * 9 + 6
    2 * (4 + 7 + 6 + 2 + 5 + 2) * 3 * (5 + (9 * 8) + 4 + 5)
    2 * (6 + 5 + 8 * 5 * (7 * 3 * 7 * 7)) * 8 + 2 + (3 + 7)
    ((3 * 8 + 7 * 8) + 5 * 2 + (7 + 4 + 8 * 3 * 6)) + (5 * 2 * 3 + 2 * 2) + 2 + 5 + 3
    3 * 5 * 9 + 4 * ((5 + 5 * 4 * 3) * 5 + 8 + 5)
    9 + 7 + (8 + 2 + 4 * 8 + 8 * 3) * 5
    (4 + 6 * 4 + 7 + 9 + 9) + 5 + 5 * 5 + (4 * 8 + 2) * 2
    (9 + 2 * 8 * 8) + 6 + (6 + 5 + 3) + (8 + 8 + 4) * 7
    2 * (9 * 9 + 9 + 7) * ((5 + 9 * 9 * 8 * 4 + 5) + 8 * (3 * 6) + (9 * 9 * 2)) + 6 + ((7 + 9 + 3 * 3) + 4 + (3 * 6 + 2 * 8))
    ((6 * 5 + 7 + 8 * 9 + 4) + 4) * 6 + 4 * (5 + (7 * 9 + 7 + 9) + 7)
    (9 * 3) * (3 + 2) + ((7 * 5 + 8 * 7 + 5) * 2) + 4 + 8
    (8 * (4 * 2 * 8 + 6 + 6) * 9 * (8 + 9 + 9 + 7 * 7 * 2) + 2 * 5) + (4 + 3 + 9) + 4 * 2 * 7 + 5
    5 * 6 + 9 + 6 + (9 * 7)
    (7 * 9 + 9 + 8 * 4) + 5 * (2 + (4 * 5 * 5 + 8) + 3 * 6 * 5) * 7
    2 + (9 * 2 * 4 + (8 + 6 * 6 + 6 * 4)) * 7
    4 * 5 + (2 * 4 + 6 + (8 * 2) * 9 * 2) + 9
    6 * 2 * (7 + 5 + 4 * 3 * 2) * 8
    (6 + (5 * 2 * 9 * 6 + 4) + 8) + 7 * 2 * 9 * 8
    (8 * 8) * ((9 * 4 * 2 * 4) * (2 + 7) + 6 * 7 * 5) + (9 + 6) * 3 * 6 * ((5 * 5 * 3 + 6 * 5 + 4) + 5 + 5)
    5 + 3 * 8 + 7 * 2 + (3 + 3 + 4)
    2 * 2 * 3 + 4
    (6 + 5 * 3 + (7 * 2 * 8) * 4 * 4) + 2
    4 + (2 + (9 * 8) * 2) + (6 + (6 * 3 * 2 * 5 + 4 + 2) + 2 + 8 * 2)
    ((3 + 9 + 9) + 3) * (3 * 4 + (3 * 8 * 3) + 3 * 4 + 5) + 3 * 5 * 9 * 5
    (9 * 7 * 4 * 5) * (9 + 6) + (5 * 4 + 7 * 6 + 9 * 4) * 5
    8 + ((2 + 5 * 2 + 4 * 4 + 5) * (2 + 4 * 6 * 8) + 3 * 7 + 8) + 3 + 6
    (4 * 6 + (2 + 9 + 5 + 4 * 7 * 2)) + 4 + 9
    3 + 6 + 9 * (7 * 6 + 5) * (6 * 7 * 3)
    (2 * 6 + (2 * 8 + 2 * 8)) + 4
    6 * 4 + 3 * 7 * 9 * (9 * 2 + 6 + 2)
    (8 + (8 * 6 + 5 * 3 + 9)) * 4 * 9 + 4 + 5
    (8 * 9 * 8) + 7 * 4 * 3 + 5 * (3 + 8 * 2 * 9 * 7 * 8)
    5 + 6 + 8 + (4 + 4 + 4 * 5 + (9 * 2 + 6) + 5)
    2 * (8 * 5 + 7 + 7 + (3 + 2) * 4) * (9 * (2 + 8 * 7))
    (2 * (4 + 7 + 9) * (2 * 3 + 5 * 9 * 5 + 4) * 6) + 2
    2 * (5 * 2 + (9 + 8 + 9 + 9 + 6) * 5) * 9 * 8 + 3 * (2 * (3 * 9) * 7 * 4 * (5 * 7) * 6)
    (5 + 3 * 4 + 9) + 2
    ((3 * 9) * (8 + 3 * 3 + 2 + 2) * 3) * 9 * 7 + 4 + (3 + 9 * 3 + (2 + 6 * 7 + 8 + 9) * (6 * 6 + 2 + 3 + 2)) * 8
    8 * (3 + 9 + 5) * (5 * (3 * 4 * 7 * 3) * 2 * 8) * 7 + (6 + 6 + 5)
    9 + (8 + 2 * 3 + 7 * 3) * 5 * 5 + 7 * 4
    6 * 9 + (9 * 5 + 7 * (4 * 5) * 2) + 9 * 4 * 5
    8 + 3 + (4 * 6 + (9 * 2 + 4 + 4 + 4 + 8) + 3)
    (3 * 6) + 2 * 9
    8 * 6 * (2 * 7 * 5 + (8 + 6 + 6) * 4 * (4 * 8)) * 7 + ((4 * 3 + 5 + 2) * 6 + (2 + 6 * 6 * 8 + 8) * 9) + 7
    (9 * (7 * 9) * (9 * 8 + 5) + 8 + (2 + 8 * 6 * 9) * (3 * 5 * 7 * 6 + 2 + 4)) + (8 * 9 + 7 + (3 * 5 * 2 * 4 + 9 * 8)) + 6 * 5
    (7 * 8 * 2 * 4) + 7 + 8 * 8 * 6 * (6 + 2 * (5 * 2) * 4)
    8 * (5 * 4 + 4) * 3 + 4 * 4
    7 + 8 + 5 + ((3 * 2 + 3 + 4 * 8) * 7 * 5)
    ((9 * 7 * 6) + 7) + 7 + 3 + (4 * (2 * 8 * 7 + 2 + 9) + (4 + 2 * 3) + 2 + 4)
    (6 + 3 * 6) * 9 * 7 * (4 * 8 * 2 * (5 * 8 * 9 + 4 + 2)) + 3
    3 * 7 * 7 + 9 * 9 + (7 + 6 + (3 + 6))
    5 + 8 + ((8 * 8 * 4 + 5 * 3 * 5) * 4 + 4 + (5 * 5 * 2)) * 4 * 5
    2 * (5 * 4 + (3 * 9 + 9 * 9) * 9) + 6 + (3 * 3) + 9 * 7
    6 * 5 + (6 * (8 * 5) * (9 + 7 * 6 * 5) * 9 + 3 * (6 + 9)) + 8
    4 + 9 + (5 * 9 + (7 * 6 * 3 * 8) + (8 + 2 + 7 * 5 + 3) + (4 + 7 * 7 + 7) + 9) + 7 + (7 + 2 + 8 + 4)
    ((6 + 4 * 4 + 5 + 7 + 7) * (8 * 2) * (6 + 3) + (9 + 3 * 4 * 7 + 4 + 9)) + 5
    (6 * 2 * 3) + 8 + 9 + (3 * 3 * 2 + 8) * (3 * 9 * 7 + 5 * 5)
    7 * 5 * (9 + 5 + 3 * 7 + 8 * 4) * 3 + 2 + 4
    (8 + 9) + ((5 * 5 + 5 * 3) + 2 + 8 + 9) * 4 * 2 * 4 * (5 + 4 + 2 * 8 + 7 * 3)
    9 * 3 * 6 + (2 * (3 + 8 * 7 * 4 + 6) + 5 + (4 * 7) + 2 * (3 * 9 * 8)) * 7
    ((6 + 3 + 8 * 6 * 8) * (8 * 6 + 4 + 9 + 4) * (4 + 9 + 2 * 2 + 3) + 7 + (3 + 9 + 3 + 7 + 9 * 6) * 4) + 8
    5 * (3 * 4 * 4 + (5 + 7 * 3)) * 3 * 5 * 7
    ((5 * 5 * 7 + 7 + 4 * 9) + 3) + 4 + 5
    (7 * 4 + 6) * 2
    6 * 2 * 5 * (8 + 6 + 3 * 8 * 5) * (4 * 3 * 5 + 4 + 5 + 9) * ((4 * 6 + 3 + 9) + 5 + 4 + 2 + 6 + 2)
    4 + (5 + 4 + 7 + (8 * 8 + 7 + 6) * 3 * 4) * (2 + 3 + 4 + 9) + 3 + 8
    5 * 5 + (7 * 9) + 5
    (2 + 3 + 3 + 5 * 6 * 2) * 7 + 8 * (2 + 5 * 8 + 2 + 3 + 5)
    2 + 5 * (5 * 7 * 5 * 3) + 2 * (7 + 4 * (5 * 9 * 5) + 6)
    5 * 7 + 7 * 4
    2 + 8 + 3 + (3 * 8 * 9) + 5
    3 + ((2 * 8 + 3) + 3) * 9 * 6 * 6
    ((7 + 6 * 3 + 6 + 7) * 4 * (9 + 6) + 6 + (5 + 8 + 4 * 7 + 9) * 7) + 9
    6 + ((2 * 7 * 6 + 2) * 9) * (8 * 5 * 2 + (2 + 6)) * 4 * 6
    (5 * 6 * 4 * 2 * 7) * 2 + 2 + (5 * 8 * (9 + 8 + 7 * 3 + 2 + 6) + 5) + (2 + (9 * 4 + 3) * 9 * 2 * 4 + 8) * 6
    ((7 * 8 + 2) * 8 * 6 * 5) + 4 + ((8 + 3 * 9 + 7) + 8 * 5) + (2 + 5 + 8) * 4
    3 * (4 + (7 + 2 * 4) * 8 * 6)
    9 * ((6 + 8 + 2 * 3) * 2 + 7 + 4 + 9 + 5) + 6 + 9
    6 + 7 + (7 * 7) + (8 * 9 + (9 + 9) + (6 * 5 * 9 + 9 * 4)) * 3
    (5 + (3 * 5) + 5) + (3 + 5 * (4 + 7 + 7 * 8) * 8 * 2) * 7
    5 * 7 + ((9 + 3 * 8) + 3 * 3)
    2 * (8 + 8) * (4 * 9 * 9 * (6 + 8 + 3)) * 7 * 7 + 8
    9 + ((6 * 4 * 9 + 3 + 7) * 5 * 9 + 9 * (2 * 8 + 3 + 7 * 9 + 4)) + 8 + 6 * 8 * 9
    (8 + 3 + 9 + 7 * 6) * 6 * 2 + 7
    7 * (5 * 4 * 8 + (9 * 7) * 7) * 8 + 3
    (5 + 5 + (3 * 9) * 3 * (6 + 2 * 5 * 4 * 5) * (8 * 7 * 9 + 9)) + 9 + ((6 * 2 + 9 + 5 + 6) + 4) * 3 * 8
    4 + 4 + 7 + 2 + (4 * 5 + 2)
    5 + 8 * (5 * (6 * 5 * 7))
    ((8 * 5 + 8 + 4 * 9 + 4) * 5 * 2 * 5) + 6 + 5
    4 + ((2 + 6 * 3 + 5) + 9 * 3 * 6 + 4 * 7) * (7 * 6 * 4)
    5 * (4 + 2 * 8 * 3 + 8 * 8)
    5 + 2 + (2 * (2 + 4) * (3 * 3 * 7 * 6 + 5 * 7) * 8 + 4) * (8 * 9 * (5 + 3 + 8 + 4 * 9 * 7))
    8 + ((5 + 4 + 9 + 3 + 8) + 9 * (3 * 2) + (6 + 5)) + ((8 + 7 * 2 * 4) * 5 + 4 + 5 + 2 * (2 * 3))
    (8 + (7 + 6 + 9 + 2 * 6 + 4) * 2 + 5) * (3 + 6 * 9 + 6 + (8 + 9 + 4 * 4 + 2 * 7) * 6) + 4
    8 + ((5 * 4) + 7) * 2 * 3 * 7
    (3 + 4 + 2 + 8 + 2 + 4) + (2 + 6 + (7 * 8 * 4) + 3) + 3 + 2 * 9 + 5
    6 * 8 * (8 * 9 + 5 + 8)
    ((8 + 2 + 5 * 8 * 9 + 4) * 8 + 9 * (9 + 2 * 6)) + 3 * 3 + 9 * (5 * 4)
    ((2 * 9) + 7 + 7 * (7 + 8 * 4 + 2)) * 6 + 6 + (4 * 2 * 7)
    7 + ((2 + 8 + 7 + 4) * (4 + 2 + 9 + 2 * 9) + 2 + (6 * 8 + 5 * 2 * 3) + 5) + 7 * (6 + 8) * 5 + 2
    8 * 5 + 3 + 7 * 7
    (6 * 3 + 2 * 5 + 6) + 5 * (4 + 9 * 2 * 8 * (7 * 7)) * 7 + 9
    2 * 7 * ((5 + 7 * 5) * 6 + 3 * (2 * 3 + 8) + 5 * (9 + 7 + 5 * 3 * 6)) + (7 * (8 * 5 + 7 * 4) * 9)
    ((6 * 9 + 8 * 8 + 2 * 8) + 8 + 5 + 4 * 7 * 4) + 7
    5 * 6 * (3 * 3 * 6) * 6 * 7 * 9
    2 + 3 + ((6 + 5) * 7 + (2 * 4) + 7) + 6
    (7 + 8 + (2 + 4 * 9 * 8 * 5)) + (3 + 8 * 7)
    9 + ((3 + 4 * 8 + 3 * 4) + 2 + 9 + (8 * 7 + 3 * 4 * 7 * 8) + 3) * 2 + 4 * 6
    4 + ((2 + 9 + 4) * 3 + (7 + 3 + 2) * 5 * 3 + 2)
    2 * 4 + 8 + 2 + 5 * (4 + 6)
    (9 + 8 + 9 + 7) * 8 + 4 * 8 * (9 + 9 * 6) * 8
    3 + 5 + (6 * 8 * 2 + (6 * 9) * 6 * 8)
    3 + 4 * 2
    6 * (3 * 2 + 3 + (6 + 3 + 7 * 4 + 2 * 7)) + 6 * 9 + 9 * 7
    8 + 6 + 4 + 4 + (6 * 3 + 9) + 7
    (4 + (3 * 5 * 7 * 7 + 4) * 5) * 2 * 6
    8 + 4 + (5 * 5) + (6 + 8 * (7 + 3 + 7 * 7) + (6 + 4 + 9 * 8) * (2 + 6 + 7 + 4 * 3 * 7)) * (8 * 7 + 9)
    ((4 * 6 * 3 + 5 * 6 + 9) + 4 * 7 + 2 + 5) + (3 * 6 + 4) + (7 + 8 + 8)")

(defn parse [input]
    (let [inputNoSp (clojure.string/replace input " " "")
          ]
        (loop [act inputNoSp res (list )]
        (if (= (count act) 0)
            res
            (case (first act)
                \+ (recur (apply str (rest act)) (concat res (list '+)))
                \* (recur (apply str (rest act)) (concat res (list '*)))
                \( (recur (apply str (rest act)) (concat res (list \()))
                \) (recur (apply str (rest act)) (concat res (list \))))
                (let [num (re-find #"\d+" act)] (recur (apply str (drop (count num) act)) (concat res (list (Integer/parseInt num))))))))))

(defn isRightPar [inC]
    (= \\) inC))

; Just workaround because of IDE bug
(defn isLeftPar [inC]
    (case inC 
        \( true
        \) false
        false))

(defn stackEvaluator [localStack num]
    (if (empty? localStack)
      (list num)
      (list ((eval (second localStack)) (first localStack) num))))

(defn evaluate [stack input]
    (loop [actStack stack in input]
    (let [actSym (first in)]
          ;_ (println actStack " & " actSym (= '+ actSym) " & " in " END")]
        (cond
        (empty? in) actStack
        (= '+ actSym) (recur (concat actStack (list '+)) (rest in))
        (= '* actSym) (recur (concat actStack (list '*)) (rest in))
        (integer? actSym) (recur (stackEvaluator actStack actSym)  (rest in))
        (isLeftPar actSym) (let [evaled (evaluate (list ) (rest in))] (recur (stackEvaluator actStack (first evaled)) (second evaled)))
        (isRightPar actSym) (list (first actStack) (rest in)) 
        :else false))))

(defn stackEvaluator1 [localStack num]
    (if (empty? localStack)
      (list num)
      (cond
       (= '* (last localStack)) (concat localStack (list num))
       (= '+ (last localStack)) (concat (drop-last (drop-last localStack)) (list ((eval (last localStack)) (last (drop-last localStack)) num))))))

(defn evalMulStack [stack]
    (reduce * 1 (filter #(not= % '*) stack)))

(defn evaluate1 [stack input]
    (loop [actStack stack in input]
    (let [actSym (first in)
          _ (println actStack " & " actSym (= '* actSym) " & " in " END")]
        (cond
        (empty? in) actStack
        (= '+ actSym) (recur (concat actStack (list '+)) (rest in))
        (= '* actSym) (recur (concat actStack (list '*)) (rest in))
        (integer? actSym) (recur (stackEvaluator1 actStack actSym)  (rest in))
        (isLeftPar actSym) (let [evaled (evaluate1 (list ) (rest in))] (recur (stackEvaluator1 actStack (first evaled)) (second evaled)))
        (isRightPar actSym) (list (evalMulStack actStack) (rest in)) 
        :else false))))

(def splitted (clojure.string/split-lines input))

(defn parseAndEval [line]
    (->> line
        parse
        (evaluate1 (list ) )
        evalMulStack
        ))